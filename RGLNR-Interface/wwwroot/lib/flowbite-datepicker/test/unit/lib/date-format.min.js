/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/flowbite-datepicker@1.3.0/test/unit/lib/date-format.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import"../_setup.js";import{parseDate,formatDate}from"../../../js/lib/date-format.js";describe("lib/date",(function(){const e={days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",titleFormat:"MM yyyy"},t={days:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],daysShort:["Son","Mon","Die","Mit","Don","Fre","Sam"],months:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthsShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"]},a={days:["Domingo","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado"],daysShort:["Dom","Lun","Mar","Mié","Jue","Vie","Sáb"],months:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],monthsShort:["Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic"]},o={days:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],daysShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],daysMin:["d","l","ma","me","j","v","s"],months:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthsShort:["janv.","févr.","mars","avril","mai","juin","juil.","août","sept.","oct.","nov.","déc."]};describe("parseDate()",(function(){const a=(new Date).setHours(0,0,0,0),y=(new Date).getFullYear();it("return undefined if the given date is falsy value other than 0 or invalid date",(function(){expect(parseDate(),"to be undefined"),expect(parseDate(""),"to be undefined"),expect(parseDate(new Date("")),"to be undefined"),expect(parseDate(0),"not to be undefined")})),it("returns time value of the same day's 00:00:00 local time if the given date is a Date object or time value",(function(){const e=(new Date).setHours(0,0,0,0);expect(parseDate(new Date),"to be",e),expect(parseDate(Date.now()),"to be",e)})),it("invokes custom parse fucntion and returns the result if it's given to format.toValue",(function(){const t=new Date,a={toValue:sinon.stub()};a.toValue.returns(t),expect(parseDate("2020-01-01",a,e),"to be",t.setHours(0,0,0,0)),expect(a.toValue.calledWith("2020-01-01",a,e),"to be true")})),it('returns the date that the word means if given date is "today"',(function(){expect(parseDate("today"),"to be",a)})),it('uses format: "d" or "dd" as day of month to parse date string',(function(){expect(parseDate("2012-03-5","yyyy-mm-d"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("2012-03-15","yyyy-mm-d"),"to be",new Date(2012,2,15).getTime()),expect(parseDate("2012-03-05","yyyy-mm-d"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("2012-03-5","yyyy-mm-dd"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("2012-03-15","yyyy-mm-dd"),"to be",new Date(2012,2,15).getTime()),expect(parseDate("2012-03-05","yyyy-mm-dd"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("5/03/2012","dd/mm/yyyy"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("15/03/2012","d/mm/yyyy"),"to be",new Date(2012,2,15).getTime())})),it('accepts 0 and number larger than the end of the month for "d", "dd"',(function(){expect(parseDate("2012-03-0","yyyy-mm-d"),"to be",new Date(2012,1,29).getTime()),expect(parseDate("2012-03-33","yyyy-mm-d"),"to be",new Date(2012,3,2).getTime()),expect(parseDate("2013-02-60","yyyy-mm-d"),"to be",new Date(2013,3,1).getTime())})),it('uses format: "m", "mm", "M" or "MM" as month to parse date string',(function(){const a=new Date(y,2,31),r=sinon.useFakeTimers({now:a});expect(parseDate("2012-3-5","yyyy-m-d"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("2012-12-15","yyyy-m-d"),"to be",new Date(2012,11,15).getTime()),expect(parseDate("2012-03-05","yyyy-m-d"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("2012-3-5","yyyy-mm-dd"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("2012-12-15","yyyy-mm-dd"),"to be",new Date(2012,11,15).getTime()),expect(parseDate("2012-03-05","yyyy-mm-dd"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("5/3/2012","dd/mm/yyyy"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("15/12/2012","d/m/yyyy"),"to be",new Date(2012,11,15).getTime()),expect(parseDate("2012-02-28","yyyy-mm-dd"),"to be",new Date(2012,1,28).getTime()),expect(parseDate("2012-09-15","yyyy-mm-dd"),"to be",new Date(2012,8,15).getTime()),expect(parseDate("Mar 5, 2012","M d, yyyy",e),"to be",new Date(2012,2,5).getTime()),expect(parseDate("Dec 15, 2012","M d, yyyy",e),"to be",new Date(2012,11,15).getTime()),expect(parseDate("Mär 5, 2012","M d, yyyy",t),"to be",new Date(2012,2,5).getTime()),expect(parseDate("Dez 15, 2012","M d, yyyy",t),"to be",new Date(2012,11,15).getTime()),expect(parseDate("mars 5, 2012","M d, yyyy",o),"to be",new Date(2012,2,5).getTime()),expect(parseDate("déc. 15, 2012","M d, yyyy",o),"to be",new Date(2012,11,15).getTime()),expect(parseDate("March 5, 2012","MM d, yyyy",e),"to be",new Date(2012,2,5).getTime()),expect(parseDate("December 15, 2012","MM d, yyyy",e),"to be",new Date(2012,11,15).getTime()),expect(parseDate("März 5, 2012","MM d, yyyy",t),"to be",new Date(2012,2,5).getTime()),expect(parseDate("Dezember 15, 2012","MM d, yyyy",t),"to be",new Date(2012,11,15).getTime()),expect(parseDate("mars 5, 2012","MM d, yyyy",o),"to be",new Date(2012,2,5).getTime()),expect(parseDate("décembre 15, 2012","MM d, yyyy",o),"to be",new Date(2012,11,15).getTime()),expect(parseDate("3/5/2012","M/dd/yyyy",e),"to be",new Date(2012,2,5).getTime()),expect(parseDate("12/15/2012","MM/dd/yyyy",e),"to be",new Date(2012,11,15).getTime()),expect(parseDate("Mar/5/2012","m/d/yyyy",e),"to be",new Date(2012,2,5).getTime()),expect(parseDate("December/15/2012","mm/dd/yyyy",e),"to be",new Date(2012,11,15).getTime()),r.restore()})),it('accepts 0 and number larger than 12 for "m", "mm"',(function(){const e=new Date(y,2,31),t=sinon.useFakeTimers({now:e});expect(parseDate("2012-0-05","yyyy-m-dd"),"to be",new Date(2011,11,5).getTime()),expect(parseDate("2012-16-30","yyyy-m-d"),"to be",new Date(2013,3,30).getTime()),expect(parseDate("2012-32-30","yyyy-m-d"),"to be",new Date(2014,7,30).getTime()),t.restore()})),it("evaluates month name with case-insensible begin-with match",(function(){const t=new Date(y,2,31),a=sinon.useFakeTimers({now:t});expect(parseDate("march 5, 2012","M d, yyyy",e),"to be",new Date(2012,2,5).getTime()),expect(parseDate("DEC 15, 2012","MM d, yyyy",e),"to be",new Date(2012,11,15).getTime()),expect(parseDate("MA 5, 2012","MM d, yyyy",e),"to be",new Date(2012,2,5).getTime()),expect(parseDate("j 5, 2012","MM d, yyyy",e),"to be",new Date(2012,0,5).getTime()),expect(parseDate("ju 5, 2012","MM d, yyyy",e),"to be",new Date(2012,5,5).getTime()),expect(parseDate("march/5/2012","m/d/yyyy",e),"to be",new Date(2012,2,5).getTime()),expect(parseDate("DEC/15/2012","mm/dd/yyyy",e),"to be",new Date(2012,11,15).getTime()),expect(parseDate("MA/05/2012","mm/dd/yyyy",e),"to be",new Date(2012,2,5).getTime()),expect(parseDate("j/05/2012","mm/dd/yyyy",e),"to be",new Date(2012,0,5).getTime()),expect(parseDate("ju/05/2012","mm/dd/yyyy",e),"to be",new Date(2012,5,5).getTime()),a.restore()})),it('uses format: "y", "yy" or "yyyy" as year to parse date string',(function(){expect(parseDate("2012-3-5","y-m-d"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("1984-3-15","y-m-d"),"to be",new Date(1984,2,15).getTime()),expect(parseDate("12-03-05","y-m-d"),"to be",new Date(0,2,5).setFullYear(12)),expect(parseDate("2012-3-5","yy-m-d"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("1984-3-15","yy-m-d"),"to be",new Date(1984,2,15).getTime()),expect(parseDate("12-03-05","yy-m-d"),"to be",new Date(0,2,5).setFullYear(12)),expect(parseDate("2012-03-5","yyyy-mm-dd"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("1984-03-15","yyyy-mm-dd"),"to be",new Date(1984,2,15).getTime()),expect(parseDate("12-03-05","yyyy-mm-dd"),"to be",new Date(0,2,5).setFullYear(12)),expect(parseDate("5/03/2012","dd/mm/yyyy"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("15/03/1984","d/m/yy"),"to be",new Date(1984,2,15).getTime())})),it('ignores "D" and "DD" (day of week)',(function(){let t=parseDate("2012-03-05","yyyy-mm-dd-D");expect(t,"to be",new Date(2012,2,5).getTime()),t=parseDate("Sat, Dec 15, 2012","DD, M dd, yyyy",e),expect(t,"to be",new Date(2012,11,15).getTime())})),it("uses current date's year/month/day to complement undefined, missing or unparsable parts",(function(){const t=new Date(y,2,31),a=sinon.useFakeTimers({now:t});expect(parseDate("03-05","mm-dd"),"to be",new Date(y,2,5).getTime()),expect(parseDate("2012-06","yyyy-mm"),"to be",new Date(2012,5,30).getTime()),expect(parseDate("5, 2012","d, yyyy"),"to be",new Date(2012,2,5).getTime()),expect(parseDate("Mai/10","M/d",e),"to be",new Date(y,2,10).getTime()),expect(parseDate("Maya/10","M/d",e),"to be",new Date(y,2,10).getTime()),expect(parseDate("03-05","yyyy-mm-dd"),"to be",new Date(0,4,31).setFullYear(3)),expect(parseDate("Sun, 23","DD, mm-dd"),"to be",new Date(y+1,10,30).getTime()),expect(parseDate("Mar/05/12","yyyy/mm/dd",e),"to be",new Date(y,4,12).getTime()),expect(parseDate("05/Mar/12","yyyy/mm/dd",e),"to be",new Date(0,2,12).setFullYear(5)),expect(parseDate("2012年十二月十五日","yyyy年mm月dd日",e),"to be",new Date(2012,2,31).getTime()),a.restore()})),it("throws an Error if format is neither a valid format string nor an object w/ toValue property",(function(){expect((()=>parseDate("01-01-01",{})),"to throw error"),expect((()=>parseDate("01-01-01",1)),"to throw error"),expect((()=>parseDate("01-01-01","aa-bb-cc")),"to throw error")}))})),describe("formatDate()",(function(){it("return empty string if the given date is falsy value other than 0 or invalid date",(function(){expect(formatDate(),"to be",""),expect(formatDate(""),"to be",""),expect(formatDate(new Date("")),"to be",""),expect(formatDate(0,"yyyy",e),"not to be","")})),it("invokes custom format fucntion and returns the result if it's given to format.toDisplay",(function(){const t=new Date(2012,2,5),a={toDisplay:sinon.stub()};a.toDisplay.returns("foo-bar"),expect(formatDate(t,a,e),"to be","foo-bar"),expect(a.toDisplay.calledWith(t,a,e),"to be true")})),it('uses format: "d" as day of month, no leading zero to format date',(function(){expect(formatDate(new Date(2012,2,5),"yyyy-mm-d",e),"to be","2012-03-5"),expect(formatDate(0,"d",e),"to be",String(new Date(0).getDate()))})),it('uses format: "dd" as day of month, leading zero to format date',(function(){const t=new Date(2012,2,5);expect(formatDate(t,"yyyy-mm-dd",e),"to be","2012-03-05"),expect(formatDate(t.getTime(),"yyyy-mm-dd",e),"to be","2012-03-05")})),it('uses format: "D" as short day of week in given language to format date',(function(){const t=new Date(2012,2,5);expect(formatDate(t,"yyyy-mm-dd-D",e),"to be","2012-03-05-Mon"),expect(formatDate(t,"yyyy-mm-dd-D",a),"to be","2012-03-05-Lun")})),it('uses format: "DD" as long day of week in given language to format date',(function(){const t=new Date(2012,2,5);expect(formatDate(t,"yyyy-mm-dd-DD",e),"to be","2012-03-05-Monday"),expect(formatDate(t,"yyyy-mm-dd-DD",a),"to be","2012-03-05-Lunes")})),it('uses format: "m" as Month, no leading zero. to format date',(function(){expect(formatDate(new Date(2012,2,5),"yyyy-m-dd",e),"to be","2012-3-05")})),it('uses format: "mm" as Month, leading zero. to format date',(function(){expect(formatDate(new Date(2012,2,5),"yyyy-mm-dd",e),"to be","2012-03-05")})),it('uses format: "M" as month shortname in given language to format date',(function(){const a=new Date(2012,2,5);expect(formatDate(a,"yyyy-M-dd",e),"to be","2012-Mar-05"),expect(formatDate(a,"yyyy-M-dd",t),"to be","2012-Mär-05")})),it('uses format: "MM" as month full name in given language to format date',(function(){const a=new Date(2012,2,5);expect(formatDate(a,"yyyy-MM-dd",e),"to be","2012-March-05"),expect(formatDate(a,"yyyy-MM-dd",t),"to be","2012-März-05")})),it('uses format: "y" as Year, no leading zero. to format date',(function(){expect(formatDate(new Date(0,2,5).setFullYear(2),"y-m-d",e),"to be","2-3-5"),expect(formatDate(new Date(0,2,5).setFullYear(12),"y-m-d",e),"to be","12-3-5"),expect(formatDate(new Date(2012,2,5),"y-m-d",e),"to be","2012-3-5")})),it('uses format: "yy" as Year, two-digit. to format date',(function(){expect(formatDate(new Date(0,2,5).setFullYear(2),"yy-mm-dd",e),"to be","02-03-05"),expect(formatDate(new Date(0,2,5).setFullYear(12),"yy-mm-dd",e),"to be","12-03-05"),expect(formatDate(new Date(2012,2,5),"yy-mm-dd",e),"to be","12-03-05")})),it('uses format: "yyyy" as Year, four-digit. to format date',(function(){expect(formatDate(new Date(0,2,5).setFullYear(2),"yyyy-mm-dd",e),"to be","0002-03-05"),expect(formatDate(new Date(0,2,5).setFullYear(12),"yyyy-mm-dd",e),"to be","0012-03-05"),expect(formatDate(new Date(2012,2,5),"yyyy-mm-dd",e),"to be","2012-03-05")})),it("accepts separators come before and after the date numbers",(function(){expect(formatDate(new Date(2012,2,5),"西暦yyyy年mm月dd日",e),"to be","西暦2012年03月05日")})),it("throws an Error if format is neither a valid format string nor an object w/ toValue property",(function(){const e=new Date(2012,2,5);expect((()=>formatDate(e,{})),"to throw error"),expect((()=>formatDate(e,1)),"to throw error"),expect((()=>formatDate(e,"aa-bb-cc")),"to throw error")}))}))}));
//# sourceMappingURL=/sm/a5831dd11a689807530bd8b4dcd9aca17f022ca5ce8ff651f26f6a49d9816a9e.map