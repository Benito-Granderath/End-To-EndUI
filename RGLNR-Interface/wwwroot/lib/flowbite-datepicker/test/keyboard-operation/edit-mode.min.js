/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/flowbite-datepicker@1.3.0/test/keyboard-operation/edit-mode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
describe("keyboard operation - edit mode",(function(){let e;beforeEach((function(){e=document.createElement("input"),testContainer.appendChild(e)})),afterEach((function(){testContainer.removeChild(e)})),it("turns on when Datepicker.enterEditMode() is called",(function(){const t=new Datepicker(e);e.focus(),t.enterEditMode(),expect(t.editMode,"to be true"),expect(e.classList.contains("in-edit"),"to be true"),t.destroy(),e.classList.remove("in-edit")})),it("turns on when a printable letter, backspace or delete key is pressed without ctrl/meta",(function(){const t=new Datepicker(e);e.focus(),simulant.fire(e,"keydown",{key:"1"}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"J"}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"/"}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:" "}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"Backspace"}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"Delete"}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"1",shiftKey:!0}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"1",altKey:!0}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"1",ctrlKey:!0}),expect(t.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),simulant.fire(e,"keydown",{key:"1",metaKey:!0}),expect(t.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),simulant.fire(e,"keydown",{key:"PageDown"}),expect(t.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),simulant.fire(e,"keydown",{key:"Escape",ctrlKey:!0}),expect(t.editMode,"to be undefined"),t.destroy()})),it("turns on when shift + either of arrow keys is pressed without ctrl/meta",(function(){const t=new Datepicker(e);e.focus(),simulant.fire(e,"keydown",{key:"ArrowLeft",shiftKey:!0}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"ArrowRight",shiftKey:!0}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"ArrowUp",shiftKey:!0}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"ArrowDown",shiftKey:!0}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"ArrowLeft",altKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowLeft",ctrlKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowLeft",metaKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowRight",altKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowRight",ctrlKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowRight",metaKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowUp",altKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowUp",ctrlKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowUp",metaKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowDown",altKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowDown",ctrlKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowDown",metaKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowLeft",shiftKey:!0,altKey:!0}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"ArrowLeft",shiftKey:!0,ctrlKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowLeft",shiftKey:!0,metaKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowRight",shiftKey:!0,altKey:!0}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"ArrowRight",shiftKey:!0,ctrlKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowRight",shiftKey:!0,metaKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowUp",shiftKey:!0,altKey:!0}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"ArrowUp",shiftKey:!0,ctrlKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowUp",shiftKey:!0,metaKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowDown",shiftKey:!0,altKey:!0}),expect(t.editMode,"to be true"),delete t.editMode,e.classList.remove("in-edit"),simulant.fire(e,"keydown",{key:"ArrowDown",shiftKey:!0,ctrlKey:!0}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"ArrowDown",shiftKey:!0,metaKey:!0}),expect(t.editMode,"to be undefined"),t.destroy()})),it("turns on when input is clicked",(function(){const t=new Datepicker(e);e.focus(),simulant.fire(e,"mousedown"),e.click(),expect(t.editMode,"to be true"),expect(e.classList.contains("in-edit"),"to be true"),t.destroy(),e.classList.remove("in-edit")})),it("does not turn on when the picker is hidden",(function(){const t=new Datepicker(e);t.enterEditMode(),expect(t.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),simulant.fire(e,"keydown",{key:"1"}),expect(t.editMode,"to be undefined"),simulant.fire(e,"keydown",{key:"J"}),expect(t.editMode,"to be undefined"),simulant.fire(e,"mousedown"),e.click(),expect(t.editMode,"to be undefined"),t.destroy()})),it("disables the arrow-key operation of the picker",(function(){const t=sinon.useFakeTimers({now:new Date(2020,1,14)}),{dp:i,picker:o}=createDP(e),d=getViewSwitch(o);e.focus(),i.enterEditMode(),simulant.fire(e,"keydown",{key:"ArrowLeft"}),expect(d.textContent,"to be","February 2020");let n=getCells(o);expect(filterCells(n,".focused"),"to equal",[n[19]]),expect(n[19].textContent,"to be","14"),simulant.fire(e,"keydown",{key:"ArrowRight"}),expect(d.textContent,"to be","February 2020"),n=getCells(o),expect(filterCells(n,".focused"),"to equal",[n[19]]),simulant.fire(e,"keydown",{key:"ArrowUp"}),expect(d.textContent,"to be","February 2020"),n=getCells(o),expect(filterCells(n,".focused"),"to equal",[n[19]]),simulant.fire(e,"keydown",{key:"ArrowDownt"}),expect(d.textContent,"to be","February 2020"),n=getCells(o),expect(filterCells(n,".focused"),"to equal",[n[19]]),d.click(),simulant.fire(e,"keydown",{key:"ArrowLeft"}),expect(d.textContent,"to be","2020"),n=getCells(o),expect(filterCells(n,".focused"),"to equal",[n[1]]),d.click(),simulant.fire(e,"keydown",{key:"ArrowRight"}),expect(d.textContent,"to be","2020-2029"),n=getCells(o),expect(filterCells(n,".focused"),"to equal",[n[1]]),d.click(),simulant.fire(e,"keydown",{key:"ArrowDown"}),expect(d.textContent,"to be","2000-2090"),n=getCells(o),expect(filterCells(n,".focused"),"to equal",[n[3]]),i.destroy(),t.restore()})),it("turns off when Datepicker.exitEditMode() is called",(function(){const t=new Datepicker(e);e.focus(),t.enterEditMode(),t.exitEditMode(),expect(t.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),t.destroy()})),it("turns off when the picker hides",(function(){const{dp:t,picker:i}=createDP(e);e.focus(),t.enterEditMode(),t.hide(),expect(t.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),t.destroy()})),it("turns off when escape key is pressed",(function(){const t=new Datepicker(e);e.focus(),t.enterEditMode(),simulant.fire(e,"keydown",{key:"Escape"}),expect(t.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),t.destroy()})),it("leaves the edit on the input as-is by default when turning off",(function(){const t=new Datepicker(e),i=dateValue(2020,1,14);t.setDate(i),e.focus(),t.enterEditMode(),e.value="4/22/2020",t.exitEditMode(),expect(e.value,"to be","4/22/2020"),expect(t.dates,"to equal",[i]),t.show(),t.enterEditMode(),e.value="3/8/2020",t.hide(),expect(e.value,"to be","3/8/2020"),expect(t.dates,"to equal",[i]),t.show(),t.enterEditMode(),e.value="02/14/2020",simulant.fire(e,"keydown",{key:"Escape"}),expect(e.value,"to be","02/14/2020"),expect(t.dates,"to equal",[i]),t.destroy()})),it("hides the picker when turning off by escape key press",(function(){const{dp:t,picker:i}=createDP(e);e.focus(),t.enterEditMode(),simulant.fire(e,"keydown",{key:"Escape"}),expect(isVisible(i),"to be false"),t.show(),t.enterEditMode(),t.exitEditMode(),expect(isVisible(i),"to be true"),t.destroy()})),it("updates the selection with the input when turning off by exitEditMode() call with update: true option",(function(){const t=new Datepicker(e),i=dateValue(2020,3,22);t.setDate("02/14/2020"),e.focus(),t.enterEditMode(),e.value="4/22/2020",t.exitEditMode({update:!0}),expect(t.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),expect(e.value,"to be","04/22/2020"),expect(t.dates,"to equal",[i]),t.destroy()})),it("updates the selection with the input when turning off by enter key press",(function(){const t=new Datepicker(e),i=dateValue(2020,3,22);t.setDate("02/14/2020"),e.focus(),t.enterEditMode(),e.value="4/22/2020",simulant.fire(e,"keydown",{key:"Enter"}),expect(t.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),expect(e.value,"to be","04/22/2020"),expect(t.dates,"to equal",[i]),t.destroy()})),it("updates the selection with the input when turning off being induced by unfocusing input element",(function(){const t=document.createElement("p");testContainer.appendChild(t);const i=new Datepicker(e),o=dateValue(2020,3,22);i.setDate("02/14/2020"),e.focus(),i.enterEditMode(),e.value="4/22/2020",simulant.fire(e,"keydown",{key:"Tab"}),expect(i.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),expect(e.value,"to be","04/22/2020"),expect(i.dates,"to equal",[o]),i.setDate("02/14/2020"),i.show(),i.enterEditMode(),e.value="4/22/2020",simulant.fire(t,"mousedown"),expect(i.editMode,"to be undefined"),expect(e.classList.contains("in-edit"),"to be false"),expect(e.value,"to be","04/22/2020"),expect(i.dates,"to equal",[o]),i.destroy(),testContainer.removeChild(t)}))}));
//# sourceMappingURL=/sm/fffd1d2b0abf15f47a2ae729d6f35badd8598890d2e176ab5a70435d1d8766a2.map