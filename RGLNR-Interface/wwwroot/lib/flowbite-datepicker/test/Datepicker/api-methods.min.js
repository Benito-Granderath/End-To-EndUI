/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/flowbite-datepicker@1.3.0/test/Datepicker/api-methods.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
describe("Datepicker - API methods",(function(){let e,t,l,o;beforeEach((function(){e=sinon.useFakeTimers({now:new Date(2020,2,14)}),t=parseHTML('<input type="text" value="04/22/2020">').firstChild,testContainer.appendChild(t),l=new Datepicker(t),o=document.querySelector(".datepicker"),t.focus()})),afterEach((function(){t.datepicker&&l.destroy(),testContainer.removeChild(t),e.restore()})),describe("getDate()",(function(){it("returns a Date object of selected date",(function(){const e=l.getDate();expect(e,"to be a date"),expect(e.getTime(),"to be",dateValue(2020,3,22))})),it("returns a formatted date stirng of selected date if the format is specified",(function(){expect(l.getDate("yyyy-mm-dd"),"to be","2020-04-22")})),it("returns undefined if no date is selected",(function(){l.destroy(),t.value="",l=new Datepicker(t),expect(l.getDate(),"to be undefined"),expect(l.getDate("yyyy-mm-dd"),"to be undefined")}))})),describe("setDate()",(function(){it("changes the selected date to given date",(function(){const e=sinon.spy();t.addEventListener("change",e);const c=getViewSwitch(o),a=new Date(2019,11,23);l.setDate(a),expect(l.dates,"to equal",[a.getTime()]),expect(t.value,"to be","12/23/2019"),expect(c.textContent,"to be","December 2019");let n=getCells(o);expect(filterCells(n,".selected"),"to equal",[n[22]]),expect(filterCells(n,".focused"),"to equal",[n[22]]),expect(n[22].textContent,"to be","23"),l.setDate("04/22/2020"),expect(l.dates,"to equal",[dateValue(2020,3,22)]),expect(t.value,"to be","04/22/2020"),expect(c.textContent,"to be","April 2020"),n=getCells(o),expect(filterCells(n,".selected"),"to equal",[n[24]]),expect(filterCells(n,".focused"),"to equal",[n[24]]),expect(n[24].textContent,"to be","22"),expect(e.called,"to be false"),t.removeEventListener("change",e),l.picker.changeFocus(dateValue(2021,3,20)).changeView(2).render(),l.setDate("02/14/2020"),expect(l.dates,"to equal",[dateValue(2020,1,14)]),expect(t.value,"to be","02/14/2020"),expect(c.textContent,"to be","February 2020"),n=getCells(o),expect(filterCells(n,".selected"),"to equal",[n[19]]),expect(filterCells(n,".focused"),"to equal",[n[19]]),expect(n[19].textContent,"to be","14")})),it("does nothing if no date or invalid date is given",(function(){const e=getViewSwitch(o),c=[dateValue(2020,3,22)];l.setDate(),expect(l.dates,"to equal",c),expect(t.value,"to be","04/22/2020"),expect(e.textContent,"to be","April 2020");const a=getCells(o);expect(filterCells(a,".selected"),"to equal",[a[24]]),expect(filterCells(a,".focused"),"to equal",[a[24]]),expect(a[24].textContent,"to be","22"),l.setDate(""),expect(l.dates,"to equal",c),expect(t.value,"to be","04/22/2020")})),it("clears the selection if no dates + clear: true option are given",(function(){const e=sinon.spy();t.addEventListener("change",e);const c=getViewSwitch(o),a=dateUtils.today();l.setDate({clear:!0}),expect(l.dates,"to equal",[]),expect(t.value,"to be",""),expect(c.textContent,"to be",Datepicker.formatDate(a,"MM yyyy"));const n=getCells(o),s=filterCells(n,(e=>e.dataset.date==a))[0];expect(s.textContent,"to be",Datepicker.formatDate(a,"d")),expect(filterCells(n,".selected"),"to equal",[]),expect(filterCells(n,".focused"),"to equal",[s]),expect(e.called,"to be false"),t.removeEventListener("change",e)})),it("omits updating the picker UI if render option = false",(function(){const e=new Date(2019,11,23);l.setDate(e,{render:!1}),expect(l.dates,"to equal",[e.getTime()]),expect(t.value,"to be","12/23/2019");const c=getCells(o);expect(filterCells(c,".selected"),"to equal",[c[24]]),expect(filterCells(c,".focused"),"to equal",[c[24]]),expect(c[24].textContent,"to be","22")})),it("hides the picker if both render and autohide options are true",(function(){let e=new Date(2019,11,23);l.setDate(e,{render:!1,autohide:!0}),expect(l.dates,"to equal",[e.getTime()]),expect(t.value,"to be","12/23/2019"),expect(getViewSwitch(o).textContent,"to be","April 2020"),expect(filterCells(getCells(o),".selected")[0].textContent,"to be","22"),expect(isVisible(o),"to be true"),e=new Date(2018,6,14),l.setDate(e,{autohide:!0}),expect(l.dates,"to equal",[e.getTime()]),expect(t.value,"to be","07/14/2018"),expect(getViewSwitch(o).textContent,"to be","July 2018"),expect(filterCells(getCells(o),".selected")[0].textContent,"to be","14"),expect(isVisible(o),"to be false")}))})),describe("update()",(function(){it("updates the selected date with the input element's value",(function(){const e=getViewSwitch(o),c=new Date(2019,11,23);t.value="12/23/2019",l.update(),expect(l.dates,"to equal",[c.getTime()]),expect(t.value,"to be","12/23/2019"),expect(e.textContent,"to be","December 2019");let a=getCells(o);expect(filterCells(a,".selected"),"to equal",[a[22]]),expect(filterCells(a,".focused"),"to equal",[a[22]]),expect(a[22].textContent,"to be","23"),l.picker.changeFocus(dateValue(2021,3,20)).changeView(2).render(),t.value="02/14/2020",l.update(),expect(l.dates,"to equal",[dateValue(2020,1,14)]),expect(t.value,"to be","02/14/2020"),expect(e.textContent,"to be","February 2020"),a=getCells(o),expect(filterCells(a,".selected"),"to equal",[a[19]]),expect(filterCells(a,".focused"),"to equal",[a[19]]),expect(a[19].textContent,"to be","14")})),it("notmalizes iput text's format",(function(){const e=new Date(2020,6,4);t.value="7 4 2020",l.update(),expect(l.dates,"to equal",[e.getTime()]),expect(t.value,"to be","07/04/2020"),expect(getViewSwitch(o).textContent,"to be","July 2020"),expect(filterCells(getCells(o),".selected")[0].textContent,"to be","4")}))})),describe("refresh()",(function(){it("refreshes the input element and picker UI to refrect the internal data",(function(){const e=sinon.spy();t.addEventListener("change",e),l.dates=[dateValue(2020,1,14)],l.refresh(),expect(t.value,"to be","02/14/2020"),expect(getViewSwitch(o).textContent,"to be","February 2020");const c=getCells(o);expect(filterCells(c,".selected"),"to equal",[c[19]]),expect(filterCells(c,".focused"),"to equal",[c[19]]),expect(c[19].textContent,"to be","14"),expect(e.called,"to be false"),t.removeEventListener("change",e)})),it("also changes the view back to the selected date's days view",(function(){l.dates=[dateValue(2020,1,14)],l.picker.changeFocus(dateValue(2021,3,20)).changeView(2).render(),l.refresh(),expect(t.value,"to be","02/14/2020"),expect(getViewSwitch(o).textContent,"to be","February 2020");let c=getCells(o);expect(filterCells(c,".selected"),"to equal",[c[19]]),expect(filterCells(c,".focused"),"to equal",[c[19]]),expect(c[19].textContent,"to be","14"),l.dates=[],l.picker.changeFocus(dateValue(2019,10,22)).update().changeView(1).render(),l.refresh(),expect(t.value,"to be",""),expect(getViewSwitch(o).textContent,"to be","March 2020"),c=getCells(o),expect(filterCells(c,".selected"),"to equal",[]),expect(filterCells(c,".focused"),"to equal",[c[13]]),expect(c[13].textContent,"to be","14"),e.restore()})),it('refresh only picker UI if target: "picker" is passed',(function(){l.dates=[dateValue(2020,1,14)],l.refresh("picker"),expect(t.value,"to be","04/22/2020"),expect(getViewSwitch(o).textContent,"to be","February 2020");const e=getCells(o);expect(filterCells(e,".selected"),"to equal",[e[19]]),expect(filterCells(e,".focused"),"to equal",[e[19]]),expect(e[19].textContent,"to be","14")})),it('refresh only input element if target: "input" is passed',(function(){l.dates=[dateValue(2020,1,14)],l.refresh("input"),expect(t.value,"to be","02/14/2020"),expect(getViewSwitch(o).textContent,"to be","April 2020");const e=getCells(o);expect(filterCells(e,".selected"),"to equal",[e[24]]),expect(filterCells(e,".focused"),"to equal",[e[24]]),expect(e[24].textContent,"to be","22")})),it("re-renders the picker regardless of its state if forceRender true is passed",(function(){let e=getCells(o);e[16].classList.add("foo"),e[12].textContent="♥︎",l.dates=[dateValue(2020,3,10)],l.refresh("picker"),e=getCells(o),expect(t.value,"to be","04/22/2020"),expect(getViewSwitch(o).textContent,"to be","April 2020"),expect(filterCells(e,".selected"),"to equal",[e[12]]),expect(filterCells(e,".foo"),"to equal",[e[16]]),expect(e[12].textContent,"to be","♥︎"),l.refresh("picker",!0),e=getCells(o),expect(t.value,"to be","04/22/2020"),expect(getViewSwitch(o).textContent,"to be","April 2020"),expect(filterCells(e,".selected"),"to equal",[e[12]]),expect(filterCells(e,".foo"),"to equal",[]),expect(e[12].textContent,"to be","10"),e[16].classList.add("foo"),e[12].textContent="♥︎",l.refresh(!0),e=getCells(o),expect(t.value,"to be","04/10/2020"),expect(getViewSwitch(o).textContent,"to be","April 2020"),expect(filterCells(e,".selected"),"to equal",[e[12]]),expect(filterCells(e,".foo"),"to equal",[]),expect(e[12].textContent,"to be","10")}))}))}));
//# sourceMappingURL=/sm/6ec3230543f38bdb0765ad3423ca5a296e96cbd02e3449b365524377618b2cc6.map