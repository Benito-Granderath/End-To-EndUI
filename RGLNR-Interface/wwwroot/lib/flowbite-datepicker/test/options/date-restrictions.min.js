/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/flowbite-datepicker@1.3.0/test/options/date-restrictions.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
describe("options - date restrictions",(function(){const e=e=>filterCells(e,".disabled").map((e=>[e,e.textContent]));let t;beforeEach((function(){t=document.createElement("input"),testContainer.appendChild(t)})),afterEach((function(){testContainer.removeChild(t)})),describe("datesDisabled",(function(){let l;beforeEach((function(){l=sinon.useFakeTimers({now:new Date(2020,1,14)})})),afterEach((function(){l.restore()})),it("specifies unselectable dates",(function(){const l=new Datepicker(t,{datesDisabled:[new Date(2020,1,12),"2/13/2020",new Date(2020,1,13),"2/20/2020"]}),o=document.querySelector(".datepicker");l.show(),expect(o.querySelector(".prev-btn").disabled,"to be false"),expect(o.querySelector(".next-btn").disabled,"to be false");let s=getCells(o);expect(e(s),"to equal",[[s[17],"12"],[s[18],"13"],[s[25],"20"]]),s[17].click(),expect(l.dates,"to equal",[]),expect(t.value,"to be",""),expect(filterCells(s,".selected"),"to equal",[]),l.setDate(new Date(2020,1,12)),expect(l.dates,"to equal",[]),expect(t.value,"to be",""),expect(filterCells(s,".selected"),"to equal",[]),t.value="2/12/2020",l.update(),expect(l.dates,"to equal",[]),expect(t.value,"to be","2/12/2020"),expect(filterCells(s,".selected"),"to equal",[]),s[16].click(),expect(l.dates,"to equal",[dateValue(2020,1,11)]),expect(t.value,"to be","02/11/2020"),expect(filterCells(s,".selected"),"to equal",[s[16]]),l.enterEditMode(),t.value="2/12/2020",simulant.fire(t,"keydown",{key:"Enter"}),expect(l.dates,"to equal",[dateValue(2020,1,11)]),expect(t.value,"to be","2/12/2020"),expect(filterCells(s,".selected"),"to equal",[s[16]]),l.destroy()})),it("makes the picker prevent those dates becoming view date",(function(){const e=new Datepicker(t,{datesDisabled:["2/11/2020","2/12/2020","2/13/2020","2/20/2020"]}),l=document.querySelector(".datepicker"),o=getCells(l);e.show(),simulant.fire(t,"keydown",{key:"ArrowLeft"}),expect(filterCells(o,".focused"),"to equal",[o[15]]),simulant.fire(t,"keydown",{key:"ArrowRight"}),expect(filterCells(o,".focused"),"to equal",[o[19]]),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"ArrowDown"}),expect(filterCells(o,".focused"),"to equal",[o[19]]),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"ArrowUp"}),expect(filterCells(o,".focused"),"to equal",[o[24]]),simulant.fire(t,"keydown",{key:"ArrowUp"}),expect(filterCells(o,".focused"),"to equal",[o[15]]),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"ArrowDown"}),expect(filterCells(o,".focused"),"to equal",[o[19]]),e.destroy()})),it("can be updated with setOptions()",(function(){const{dp:l,picker:o}=createDP(t);l.setOptions({datesDisabled:[new Date(2020,1,11),new Date(2020,1,26)]}),l.show();let s=getCells(o);expect(e(s),"to equal",[[s[16],"11"],[s[31],"26"]]),l.setOptions({datesDisabled:[]}),s=getCells(o),expect(e(s),"to equal",[]),l.destroy()}))})),describe("daysOfWeekDisabled",(function(){let l;beforeEach((function(){l=sinon.useFakeTimers({now:new Date(2020,1,14)})})),afterEach((function(){l.restore()})),it("specifies unselectable days of week",(function(){const{dp:l,picker:o}=createDP(t,{daysOfWeekDisabled:[0,6]});l.show(),expect(o.querySelector(".prev-btn").disabled,"to be false"),expect(o.querySelector(".next-btn").disabled,"to be false");let s=getCells(o);expect(e(s),"to equal",[[s[0],"26"],[s[6],"1"],[s[7],"2"],[s[13],"8"],[s[14],"9"],[s[20],"15"],[s[21],"16"],[s[27],"22"],[s[28],"23"],[s[34],"29"],[s[35],"1"],[s[41],"7"]]),s[14].click(),expect(l.dates,"to equal",[]),expect(t.value,"to be",""),expect(filterCells(s,".selected"),"to equal",[]),l.setDate(new Date(2020,1,9)),expect(l.dates,"to equal",[]),expect(t.value,"to be",""),expect(filterCells(s,".selected"),"to equal",[]),t.value="2/9/2020",l.update(),expect(l.dates,"to equal",[]),expect(t.value,"to be","2/9/2020"),expect(filterCells(s,".selected"),"to equal",[]),s[15].click(),expect(l.dates,"to equal",[dateValue(2020,1,10)]),expect(t.value,"to be","02/10/2020"),expect(filterCells(s,".selected"),"to equal",[s[15]]),l.enterEditMode(),t.value="2/9/2020",simulant.fire(t,"keydown",{key:"Enter"}),expect(l.dates,"to equal",[dateValue(2020,1,10)]),expect(t.value,"to be","2/9/2020"),expect(filterCells(s,".selected"),"to equal",[s[15]]),l.destroy()})),it("makes the picker prevent those dates becoming view date",(function(){const{dp:e,picker:l}=createDP(t,{daysOfWeekDisabled:[0,6]}),o=getCells(l);e.show(),simulant.fire(t,"keydown",{key:"ArrowRight"}),expect(filterCells(o,".focused"),"to equal",[o[22]]),simulant.fire(t,"keydown",{key:"ArrowLeft"}),expect(filterCells(o,".focused"),"to equal",[o[19]]),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowRight"}),expect(filterCells(o,".focused"),"to equal",[o[15]]),simulant.fire(t,"keydown",{key:"ArrowLeft"}),expect(filterCells(o,".focused"),"to equal",[o[12]]),e.destroy()})),it("can be updated with setOptions()",(function(){const{dp:l,picker:o}=createDP(t);l.setOptions({daysOfWeekDisabled:[4]}),l.show();let s=getCells(o);expect(e(s),"to equal",[[s[4],"30"],[s[11],"6"],[s[18],"13"],[s[25],"20"],[s[32],"27"],[s[39],"5"]]),l.setOptions({daysOfWeekDisabled:[]}),s=getCells(o),expect(e(s),"to equal",[]),l.destroy()}))})),describe("maxDate",(function(){let l;beforeEach((function(){l=sinon.useFakeTimers({now:new Date(2020,1,14)})})),afterEach((function(){l.restore()})),it("specifies the maximum selectable date",(function(){const{dp:l,picker:o}=createDP(t,{maxDate:new Date(2020,1,25)}),s=getViewSwitch(o);l.show();let i=getCells(o);expect(e(i),"to equal",[[i[31],"26"],[i[32],"27"],[i[33],"28"],[i[34],"29"],[i[35],"1"],[i[36],"2"],[i[37],"3"],[i[38],"4"],[i[39],"5"],[i[40],"6"],[i[41],"7"]]),s.click(),i=getCells(o),expect(e(i),"to equal",[[i[2],"Mar"],[i[3],"Apr"],[i[4],"May"],[i[5],"Jun"],[i[6],"Jul"],[i[7],"Aug"],[i[8],"Sep"],[i[9],"Oct"],[i[10],"Nov"],[i[11],"Dec"]]),s.click(),i=getCells(o),expect(e(i),"to equal",[[i[2],"2021"],[i[3],"2022"],[i[4],"2023"],[i[5],"2024"],[i[6],"2025"],[i[7],"2026"],[i[8],"2027"],[i[9],"2028"],[i[10],"2029"],[i[11],"2030"]]),s.click(),i=getCells(o),expect(e(i),"to equal",[[i[4],"2030"],[i[5],"2040"],[i[6],"2050"],[i[7],"2060"],[i[8],"2070"],[i[9],"2080"],[i[10],"2090"],[i[11],"2100"]]),l.hide(),l.show(),i=getCells(o),i[31].click(),expect(l.dates,"to equal",[]),expect(t.value,"to be",""),expect(filterCells(i,".selected"),"to equal",[]),l.setDate(new Date(2020,1,26)),expect(l.dates,"to equal",[]),expect(t.value,"to be",""),expect(filterCells(i,".selected"),"to equal",[]),t.value="2/26/2020",l.update(),expect(l.dates,"to equal",[]),expect(t.value,"to be","2/26/2020"),expect(filterCells(i,".selected"),"to equal",[]),i[30].click(),expect(l.dates,"to equal",[dateValue(2020,1,25)]),expect(t.value,"to be","02/25/2020"),expect(filterCells(i,".selected"),"to equal",[i[30]]),l.enterEditMode(),t.value="2/26/2020",simulant.fire(t,"keydown",{key:"Enter"}),expect(l.dates,"to equal",[dateValue(2020,1,25)]),expect(t.value,"to be","2/26/2020"),expect(filterCells(i,".selected"),"to equal",[i[30]]),l.destroy()})),it("makes the picker disallow to navigate to after the max date",(function(){const{dp:e,picker:l}=createDP(t,{maxDate:"2/14/2020"}),[o,s,i]=getParts(l,[".view-switch",".prev-btn",".next-btn"]);e.show(),expect(s.disabled,"to be false"),expect(i.disabled,"to be true"),simulant.fire(t,"keydown",{key:"ArrowRight"});let a=getCells(l);expect(filterCells(a,".focused"),"to equal",[a[19]]),simulant.fire(t,"keydown",{key:"ArrowRight",ctrlKey:!0}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[19]]),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"ArrowDown"}),expect(filterCells(a,".focused"),"to equal",[a[13]]),s.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowDown"}),i.click(),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[19]]),s.click(),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowRight",ctrlKey:!0}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[19]]),o.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be true"),simulant.fire(t,"keydown",{key:"ArrowRight"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[1]]),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"ArrowDown"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[10]]),s.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowDown"}),i.click(),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[1]]),s.click(),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowRight",ctrlKey:!0}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[1]]),o.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be true"),simulant.fire(t,"keydown",{key:"ArrowRight"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[1]]),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"ArrowDown"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[8]]),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"ArrowDown"}),s.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowRight"}),i.click(),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[1]]),s.click(),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowRight",ctrlKey:!0}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[1]]),o.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be true"),simulant.fire(t,"keydown",{key:"ArrowRight"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[3]]),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"ArrowDown"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[10]]),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"ArrowDown"}),s.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowRight"}),i.click(),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[3]]),s.click(),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowRight",ctrlKey:!0}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[3]]),e.destroy()})),it("can be updated with setOptions()",(function(){const{dp:l,picker:o}=createDP(t);l.setOptions({maxDate:new Date(2020,1,28)}),l.show();let s=getCells(o);expect(e(s),"to equal",[[s[34],"29"],[s[35],"1"],[s[36],"2"],[s[37],"3"],[s[38],"4"],[s[39],"5"],[s[40],"6"],[s[41],"7"]]),l.setOptions({maxDate:null}),s=getCells(o),expect(e(s),"to equal",[]),l.destroy()}))})),describe("minDate",(function(){let l;beforeEach((function(){l=sinon.useFakeTimers({now:new Date(2022,6,14)})})),afterEach((function(){l.restore()})),it("specifies the minimum selectable date",(function(){const{dp:l,picker:o}=createDP(t,{minDate:new Date(2022,6,4)}),s=getViewSwitch(o);l.show();let i=getCells(o);expect(e(i),"to equal",[[i[0],"26"],[i[1],"27"],[i[2],"28"],[i[3],"29"],[i[4],"30"],[i[5],"1"],[i[6],"2"],[i[7],"3"]]),s.click(),i=getCells(o),expect(e(i),"to equal",[[i[0],"Jan"],[i[1],"Feb"],[i[2],"Mar"],[i[3],"Apr"],[i[4],"May"],[i[5],"Jun"]]),s.click(),i=getCells(o),expect(e(i),"to equal",[[i[0],"2019"],[i[1],"2020"],[i[2],"2021"]]),s.click(),i=getCells(o),expect(e(i),"to equal",[[i[0],"1990"],[i[1],"2000"],[i[2],"2010"]]),l.hide(),l.show(),i=getCells(o),i[7].click(),expect(l.dates,"to equal",[]),expect(t.value,"to be",""),expect(filterCells(i,".selected"),"to equal",[]),l.setDate(new Date(2022,6,3)),expect(l.dates,"to equal",[]),expect(t.value,"to be",""),expect(filterCells(i,".selected"),"to equal",[]),t.value="7/3/2022",l.update(),expect(l.dates,"to equal",[]),expect(t.value,"to be","7/3/2022"),expect(filterCells(i,".selected"),"to equal",[]),i[8].click(),expect(l.dates,"to equal",[dateValue(2022,6,4)]),expect(t.value,"to be","07/04/2022"),expect(filterCells(i,".selected"),"to equal",[i[8]]),l.enterEditMode(),t.value="7/3/2022",simulant.fire(t,"keydown",{key:"Enter"}),expect(l.dates,"to equal",[dateValue(2022,6,4)]),expect(t.value,"to be","7/3/2022"),expect(filterCells(i,".selected"),"to equal",[i[8]]),l.destroy()})),it("makes the picker disallow to navigate to before the min date",(function(){const{dp:e,picker:l}=createDP(t,{minDate:"7/14/2022"}),[o,s,i]=getParts(l,[".view-switch",".prev-btn",".next-btn"]);e.show(),expect(s.disabled,"to be true"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowLeft"});let a=getCells(l);expect(filterCells(a,".focused"),"to equal",[a[18]]),simulant.fire(t,"keydown",{key:"ArrowLeft",ctrlKey:!0}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[18]]),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"ArrowUp"}),expect(filterCells(a,".focused"),"to equal",[a[24]]),i.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowUp"}),s.click(),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[18]]),s.click(),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowLeft",ctrlKey:!0}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[18]]),o.click(),expect(s.disabled,"to be true"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowLeft"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[6]]),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"ArrowUp"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[9]]),i.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowUp"}),s.click(),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[6]]),s.click(),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowLeft",ctrlKey:!0}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[6]]),o.click(),expect(s.disabled,"to be true"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowLeft"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[3]]),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"ArrowUp"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[6]]),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"ArrowUp"}),i.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowLeft"}),s.click(),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[3]]),s.click(),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowLeft",ctrlKey:!0}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[3]]),o.click(),expect(s.disabled,"to be true"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowLeft"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[3]]),simulant.fire(t,"keydown",{key:"ArrowDown"}),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"ArrowUp"}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[6]]),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"ArrowUp"}),i.click(),expect(s.disabled,"to be false"),expect(i.disabled,"to be false"),simulant.fire(t,"keydown",{key:"ArrowLeft"}),s.click(),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[3]]),s.click(),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowLeft",ctrlKey:!0}),a=getCells(l),expect(filterCells(a,".focused"),"to equal",[a[3]]),e.destroy()})),it("can be updated with setOptions()",(function(){const{dp:l,picker:o}=createDP(t);l.setOptions({minDate:new Date(2022,6,2)}),l.show();let s=getCells(o);expect(e(s),"to equal",[[s[0],"26"],[s[1],"27"],[s[2],"28"],[s[3],"29"],[s[4],"30"],[s[5],"1"]]),l.setOptions({minDate:null}),s=getCells(o),expect(e(s),"to equal",[]),l.destroy()}))}))}));
//# sourceMappingURL=/sm/5fec4da6ba45ba88984f18cabf94990d365f8b72ec8bbe4fd18ee96b9dcb0bc2.map