/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/flowbite-datepicker@1.3.0/test/DateRangePicker/options.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
describe("DateRangePicker - options",(function(){let e,t,l,a;before((function(){e=sinon.useFakeTimers({now:new Date(2020,1,14)})})),after((function(){e.restore()})),beforeEach((function(){t=domUtils.parseHTML("<div><input><input></div>").firstChild,[l,a]=t.children,testContainer.appendChild(t)})),afterEach((function(){testContainer.removeChild(t)})),describe("allowOneSidedRange",(function(){it("disables the requirement for both sides of range to be set/unset",(function(){let{drp:e,picker0:c,picker1:s}=createDRP(t,{allowOneSidedRange:!0}),o=getCells(c),n=getCells(s);e.datepickers[0].show(),o[16].click(),expect(e.dates,"to equal",[dateValue(2020,1,11),void 0]),expect(e.getDates(),"to equal",[new Date(e.dates[0]),void 0]),expect(l.value,"to be","02/11/2020"),expect(filterCells(o,".selected"),"to equal",[o[16]]),expect(filterCells(o,".range-start"),"to equal",[o[16]]),expect(filterCells(o,".range-end"),"to equal",[]),expect(filterCells(o,".range"),"to equal",[]),expect(filterCells(o,".focused"),"to equal",[o[16]]),expect(a.value,"to be",""),expect(filterCells(n,".selected"),"to equal",[]),expect(filterCells(n,".range-start"),"to equal",[n[16]]),expect(filterCells(n,".range-end"),"to equal",[]),expect(filterCells(n,".range"),"to equal",[]),expect(filterCells(n,".focused"),"to equal",[n[19]]),e.datepickers[1].show(),n[25].click(),expect(e.dates,"to equal",[dateValue(2020,1,11),dateValue(2020,1,20)]),expect(e.getDates(),"to equal",e.dates.map((e=>new Date(e)))),expect(l.value,"to be","02/11/2020"),expect(filterCells(o,".selected"),"to equal",[o[16]]),expect(filterCells(o,".range-start"),"to equal",[o[16]]),expect(filterCells(o,".range-end"),"to equal",[o[25]]),expect(filterCells(o,".range"),"to equal",o.slice(17,25)),expect(filterCells(o,".focused"),"to equal",[o[16]]),expect(a.value,"to be","02/20/2020"),expect(filterCells(n,".selected"),"to equal",[n[25]]),expect(filterCells(n,".range-start"),"to equal",[n[16]]),expect(filterCells(n,".range-end"),"to equal",[n[25]]),expect(filterCells(n,".range"),"to equal",n.slice(17,25)),expect(filterCells(n,".focused"),"to equal",[n[25]]),simulant.fire(l,"keydown",{key:"Escape"}),l.value="",simulant.fire(l,"keydown",{key:"Enter"}),expect(e.dates,"to equal",[void 0,dateValue(2020,1,20)]),expect(e.getDates(),"to equal",[void 0,new Date(e.dates[1])]),expect(l.value,"to be",""),expect(filterCells(o,".selected"),"to equal",[]),expect(filterCells(o,".range-start"),"to equal",[]),expect(filterCells(o,".range-end"),"to equal",[o[25]]),expect(filterCells(o,".range"),"to equal",[]),expect(filterCells(o,".focused"),"to equal",[o[19]]),expect(a.value,"to be","02/20/2020"),expect(filterCells(n,".selected"),"to equal",[n[25]]),expect(filterCells(n,".range-start"),"to equal",[]),expect(filterCells(n,".range-end"),"to equal",[n[25]]),expect(filterCells(n,".range"),"to equal",[]),expect(filterCells(n,".focused"),"to equal",[n[25]]),e.destroy(),l.value="",a.value="",({drp:e,picker0:c,picker1:s}=createDRP(t,{allowOneSidedRange:!0})),o=getCells(c),n=getCells(s),e.setDates("02/11/2020"),expect(e.dates,"to equal",[dateValue(2020,1,11),void 0]),expect(l.value,"to be","02/11/2020"),expect(filterCells(o,".selected"),"to equal",[o[16]]),expect(a.value,"to be",""),expect(filterCells(n,".selected"),"to equal",[]),e.setDates(void 0,"02/20/2020"),expect(e.dates,"to equal",[dateValue(2020,1,11),dateValue(2020,1,20)]),expect(l.value,"to be","02/11/2020"),expect(filterCells(o,".selected"),"to equal",[o[16]]),expect(a.value,"to be","02/20/2020"),expect(filterCells(n,".selected"),"to equal",[n[25]]),e.setDates({clear:!0}),expect(e.dates,"to equal",[void 0,dateValue(2020,1,20)]),expect(l.value,"to be",""),expect(filterCells(o,".selected"),"to equal",[]),expect(a.value,"to be","02/20/2020"),expect(filterCells(n,".selected"),"to equal",[n[25]]),e.setDates("02/11/2020",{clear:!0}),expect(e.dates,"to equal",[dateValue(2020,1,11),void 0]),expect(l.value,"to be","02/11/2020"),expect(filterCells(o,".selected"),"to equal",[o[16]]),expect(a.value,"to be",""),expect(filterCells(n,".selected"),"to equal",[]),e.setDates({clear:!0},"02/20/2020"),expect(e.dates,"to equal",[void 0,dateValue(2020,1,20)]),expect(l.value,"to be",""),expect(filterCells(o,".selected"),"to equal",[]),expect(a.value,"to be","02/20/2020"),expect(filterCells(n,".selected"),"to equal",[n[25]]),e.setDates(void 0,{clear:!0}),expect(e.dates,"to equal",[void 0,void 0]),expect(l.value,"to be",""),expect(filterCells(o,".selected"),"to equal",[]),expect(a.value,"to be",""),expect(filterCells(n,".selected"),"to equal",[]),e.destroy()})),it("can be updated with setOptions()",(function(){const e=new DateRangePicker(t);e.setOptions({allowOneSidedRange:!0}),l.value="02/11/2020",simulant.fire(l,"keydown",{key:"Enter"}),expect(e.dates,"to equal",[dateValue(2020,1,11),void 0]),e.setDates({clear:!0},"02/11/2020"),expect(e.dates,"to equal",[void 0,dateValue(2020,1,11)]),e.setOptions({allowOneSidedRange:!1}),a.value="02/20/2020",simulant.fire(a,"keydown",{key:"Enter"}),expect(e.dates,"to equal",[dateValue(2020,1,20),dateValue(2020,1,20)]),e.setDates({clear:!0}),expect(e.dates,"to equal",[void 0,void 0]),e.destroy()}))})),describe("pickLevel",(function(){it("changes the span of range selection to 1st of a month → last day of a month when 1",(function(){l.value="2/14/2020",a.value="2/14/2020";const{drp:e,picker0:c,picker1:s}=createDRP(t,{pickLevel:1}),o=c.querySelector(".view-switch"),n=s.querySelector(".view-switch");let u=getCells(c),d=getCells(s);l.focus(),expect(e.dates,"to equal",[dateValue(2020,1,1),dateValue(2020,1,29)]),expect(l.value,"to be","02/01/2020"),expect(o.textContent,"to be","2020"),expect(getCellIndices(u,".selected"),"to equal",[1]),expect(getCellIndices(u,".range-start"),"to equal",[1]),expect(getCellIndices(u,".range-end"),"to equal",[1]),expect(getCellIndices(u,".range"),"to equal",[]),expect(getCellIndices(u,".focused"),"to equal",[1]),a.focus(),expect(a.value,"to be","02/29/2020"),expect(n.textContent,"to be","2020"),expect(getCellIndices(d,".selected"),"to equal",[1]),expect(getCellIndices(d,".range-start"),"to equal",[1]),expect(getCellIndices(d,".range-end"),"to equal",[1]),expect(getCellIndices(d,".range"),"to equal",[]),expect(getCellIndices(d,".focused"),"to equal",[1]),u[0].click(),d[6].click(),expect(e.dates,"to equal",[dateValue(2020,0,1),dateValue(2020,6,31)]),expect(l.value,"to be","01/01/2020"),expect(o.textContent,"to be","2020"),expect(getCellIndices(u,".selected"),"to equal",[0]),expect(getCellIndices(u,".range-start"),"to equal",[0]),expect(getCellIndices(u,".range-end"),"to equal",[6]),a.focus(),expect(a.value,"to be","07/31/2020"),expect(n.textContent,"to be","2020"),expect(getCellIndices(d,".selected"),"to equal",[6]),expect(getCellIndices(d,".range-start"),"to equal",[0]),expect(getCellIndices(d,".range-end"),"to equal",[6]),e.setDates("2/14/2021","3/14/2020"),expect(e.dates,"to equal",[dateValue(2020,2,1),dateValue(2021,1,28)]),expect(l.value,"to be","03/01/2020"),expect(o.textContent,"to be","2020"),expect(getCellIndices(u,".selected"),"to equal",[2]),expect(getCellIndices(u,".range-start"),"to equal",[2]),expect(getCellIndices(u,".range-end"),"to equal",[]),a.focus(),expect(a.value,"to be","02/28/2021"),expect(n.textContent,"to be","2021"),expect(getCellIndices(d,".selected"),"to equal",[1]),expect(getCellIndices(d,".range-start"),"to equal",[]),expect(getCellIndices(d,".range-end"),"to equal",[1]),e.destroy()})),it("changes the span of range selection to Jan 1st of a month → Dec 31st of a month when 2",(function(){l.value="2/14/2020",a.value="2/14/2020";const{drp:e,picker0:c,picker1:s}=createDRP(t,{pickLevel:2}),o=c.querySelector(".view-switch"),n=s.querySelector(".view-switch");let u=getCells(c),d=getCells(s);l.focus(),expect(e.dates,"to equal",[dateValue(2020,0,1),dateValue(2020,11,31)]),expect(l.value,"to be","01/01/2020"),expect(o.textContent,"to be","2020-2029"),expect(getCellIndices(u,".selected"),"to equal",[1]),expect(getCellIndices(u,".range-start"),"to equal",[1]),expect(getCellIndices(u,".range-end"),"to equal",[1]),expect(getCellIndices(u,".range"),"to equal",[]),expect(getCellIndices(u,".focused"),"to equal",[1]),a.focus(),expect(a.value,"to be","12/31/2020"),expect(n.textContent,"to be","2020-2029"),expect(getCellIndices(d,".selected"),"to equal",[1]),expect(getCellIndices(d,".range-start"),"to equal",[1]),expect(getCellIndices(d,".range-end"),"to equal",[1]),expect(getCellIndices(d,".range"),"to equal",[]),expect(getCellIndices(d,".focused"),"to equal",[1]),u[0].click(),d[3].click(),expect(e.dates,"to equal",[dateValue(2019,0,1),dateValue(2022,11,31)]),expect(l.value,"to be","01/01/2019"),expect(o.textContent,"to be","2010-2019"),expect(getCellIndices(u,".selected"),"to equal",[10]),expect(getCellIndices(u,".range-start"),"to equal",[10]),expect(getCellIndices(u,".range-end"),"to equal",[]),a.focus(),expect(a.value,"to be","12/31/2022"),expect(n.textContent,"to be","2020-2029"),expect(getCellIndices(d,".selected"),"to equal",[3]),expect(getCellIndices(d,".range-start"),"to equal",[0]),expect(getCellIndices(d,".range-end"),"to equal",[3]),e.setDates("2/14/2025","3/14/2021"),expect(e.dates,"to equal",[dateValue(2021,0,1),dateValue(2025,11,31)]),expect(l.value,"to be","01/01/2021"),expect(o.textContent,"to be","2020-2029"),expect(getCellIndices(u,".selected"),"to equal",[2]),expect(getCellIndices(u,".range-start"),"to equal",[2]),expect(getCellIndices(u,".range-end"),"to equal",[6]),a.focus(),expect(a.value,"to be","12/31/2025"),expect(n.textContent,"to be","2020-2029"),expect(getCellIndices(d,".selected"),"to equal",[6]),expect(getCellIndices(d,".range-start"),"to equal",[2]),expect(getCellIndices(d,".range-end"),"to equal",[6]),e.destroy()}))}))}));
//# sourceMappingURL=/sm/0d0c127ad293f540507d52d164a3e218e4f92ff68b5da07af210ce60a5367c3a.map