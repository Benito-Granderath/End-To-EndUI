/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/flowbite-datepicker@1.3.0/test/events.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
describe("events",(function(){let e,t,c,i,r;before((function(){e=sinon.useFakeTimers({now:new Date(2020,1,14)}),t=document.createElement("input"),testContainer.appendChild(t),({dp:c,picker:i}=createDP(t)),r=getViewSwitch(i)})),after((function(){c.destroy(),testContainer.removeChild(t),e.restore()})),describe("changeDate",(function(){it("is triggered when the selection is changed",(function(){const e=sinon.spy();t.addEventListener("changeDate",e),c.setDate("2/14/2020"),expect(e.calledOnce,"to be true"),e.resetHistory(),t.value="4/22/2020",c.update(),expect(e.calledOnce,"to be true"),e.resetHistory(),getCells(i)[12].click(),expect(e.calledOnce,"to be true"),e.resetHistory(),c.enterEditMode(),t.value="2/4/2020",simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledOnce,"to be true"),e.resetHistory(),c.hide(),t.value="3/20/2020",simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledOnce,"to be true"),t.removeEventListener("changeDate",e),c.setDate({clear:!0})})),it("is triggered when the selection is cleared",(function(){const e=sinon.spy();c.setDate("2/14/2020"),t.addEventListener("changeDate",e),c.setDate({clear:!0}),expect(e.calledOnce,"to be true"),c.setDate("2/14/2020"),e.resetHistory(),t.value="",c.update(),expect(e.calledOnce,"to be true"),c.setDate("2/14/2020"),e.resetHistory(),c.enterEditMode(),t.value="",simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledOnce,"to be true"),c.setDate("2/14/2020"),e.resetHistory(),c.hide(),t.value="",simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledOnce,"to be true"),t.removeEventListener("changeDate",e)})),it("is not triggered when trying to update with the current value",(function(){const e=sinon.spy();c.setDate("2/14/2020"),t.addEventListener("changeDate",e),c.setDate("2/14/2020"),expect(e.called,"to be false"),c.update(),expect(e.called,"to be false"),getCells(i)[19].click(),expect(e.called,"to be false"),c.enterEditMode(),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.called,"to be false"),c.hide(),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.called,"to be false"),t.removeEventListener("changeDate",e),c.setDate({clear:!0})}))})),describe("changeMonth",(function(){let e;beforeEach((function(){c.show(),e=sinon.spy(),t.addEventListener("changeMonth",e)})),afterEach((function(){t.removeEventListener("changeMonth",e),c.hide()})),it("is triggered when prevBtn or nextBtn is clicked on days view",(function(){const[t,c]=getParts(i,[".prev-btn",".next-btn"]);t.click(),expect(e.calledOnce,"to be true"),c.click(),expect(e.calledTwice,"to be true"),e.resetHistory(),r.click(),t.click(),expect(e.called,"to be false"),c.click(),expect(e.called,"to be false"),r.click(),t.click(),expect(e.called,"to be false"),c.click(),expect(e.called,"to be false"),r.click(),t.click(),expect(e.called,"to be false"),c.click(),expect(e.called,"to be false")})),it("is triggered when ctrl + arrow lett/right is pressed on days view",(function(){simulant.fire(t,"keydown",{key:"ArrowLeft"}),expect(e.called,"to be false"),simulant.fire(t,"keydown",{key:"ArrowRight"}),expect(e.called,"to be false"),simulant.fire(t,"keydown",{key:"ArrowLeft",ctrlKey:!0}),expect(e.calledOnce,"to be true"),simulant.fire(t,"keydown",{key:"ArrowRight",ctrlKey:!0}),expect(e.calledTwice,"to be true"),e.resetHistory(),r.click(),simulant.fire(t,"keydown",{key:"ArrowLeft",ctrlKey:!0}),expect(e.called,"to be false"),simulant.fire(t,"keydown",{key:"ArrowRight",ctrlKey:!0}),expect(e.called,"to be false"),r.click(),simulant.fire(t,"keydown",{key:"ArrowLeft",ctrlKey:!0}),expect(e.called,"to be false"),simulant.fire(t,"keydown",{key:"ArrowRight",ctrlKey:!0}),expect(e.called,"to be false"),r.click(),simulant.fire(t,"keydown",{key:"ArrowLeft",ctrlKey:!0}),expect(e.called,"to be false"),simulant.fire(t,"keydown",{key:"ArrowRight",ctrlKey:!0}),expect(e.called,"to be false")})),it("is triggered when a previous or next month's day is clicked",(function(){getCells(i)[19].click(),expect(e.called,"to be false"),getCells(i)[2].click(),expect(e.calledOnce,"to be true"),getCells(i)[40].click(),expect(e.calledTwice,"to be true"),c.setDate({clear:!0})})),it("is triggered when view date is moved to a previous or next month's day by arrow keys",(function(){simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowUp"}),simulant.fire(t,"keydown",{key:"ArrowLeft"}),expect(e.calledOnce,"to be true"),simulant.fire(t,"keydown",{key:"ArrowRight"}),expect(e.calledTwice,"to be true"),e.resetHistory(),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"ArrowUp"}),expect(e.calledOnce,"to be true"),simulant.fire(t,"keydown",{key:"ArrowDown"}),expect(e.calledTwice,"to be true")})),it("is triggered when a different month is seleced on months view",(function(){r.click(),getCells(i)[1].click(),expect(e.called,"to be false"),r.click(),getCells(i)[2].click(),expect(e.calledOnce,"to be true")})),it("is triggered when moving month by arrow keys on months view",(function(){r.click(),simulant.fire(t,"keydown",{key:"ArrowRight"}),expect(e.callCount,"to be",1),simulant.fire(t,"keydown",{key:"ArrowLeft"}),expect(e.callCount,"to be",2),simulant.fire(t,"keydown",{key:"ArrowDown"}),expect(e.callCount,"to be",3),simulant.fire(t,"keydown",{key:"ArrowUp"}),expect(e.callCount,"to be",4)})),it("is triggered when the selection is updated to a different month by API calls",(function(){c.setDate("2/22/2020"),expect(e.called,"to be false"),c.setDate("4/22/2020"),expect(e.calledOnce,"to be true"),t.value="3/14/2020",c.update(),expect(e.calledTwice,"to be true")})),it("is triggered when the selection is cleard from a date of a different month from default view date",(function(){c.setDate("2/22/2020"),e.resetHistory(),c.setDate({clear:!0}),expect(e.called,"to be false"),c.setDate("4/22/2020"),e.resetHistory(),t.value="",c.update(),expect(e.calledOnce,"to be true"),c.setDate("4/22/2020"),e.resetHistory(),c.enterEditMode(),t.value="",simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledOnce,"to be true")})),it("is triggered before changeDate when triggered on change of the selection",(function(){const i=sinon.spy();t.addEventListener("changeDate",i),c.setDate("4/22/2020"),expect(i.called,"to be true"),expect(e.called,"to be true"),expect(e.calledBefore(i),"to be true"),t.removeEventListener("changeDate",i),c.setDate({clear:!0})})),it("is triggered when view is reset from different month from default view date on hide",(function(){i.querySelector(".next-btn").click(),e.resetHistory(),c.hide(),expect(e.calledOnce,"to be true")})),it("is not triggered when view date is changed to the same month of different year",(function(){r.click(),r.click(),getCells(i)[3].click(),expect(e.called,"to be false"),getCells(i)[1].click(),expect(e.called,"to be false"),r.click(),r.click(),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.called,"to be false"),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.called,"to be false")}))})),describe("changeYear",(function(){let e;beforeEach((function(){c.show(),e=sinon.spy(),t.addEventListener("changeYear",e)})),afterEach((function(){t.removeEventListener("changeYear",e),c.hide()})),it("is triggered when prevBtn on January on days view or nextBtn on December is clicked",(function(){const[t,c]=getParts(i,[".prev-btn",".next-btn"]);t.click(),e.resetHistory(),t.click(),expect(e.calledOnce,"to be true"),c.click(),expect(e.calledTwice,"to be true")})),it("is triggered when ctrl + arrow lett is pressed on January on days view or right on December",(function(){i.querySelector(".prev-btn").click(),e.resetHistory(),simulant.fire(t,"keydown",{key:"ArrowLeft"}),expect(e.called,"to be false"),simulant.fire(t,"keydown",{key:"ArrowRight"}),expect(e.called,"to be false"),simulant.fire(t,"keydown",{key:"ArrowLeft",ctrlKey:!0}),expect(e.calledOnce,"to be true"),simulant.fire(t,"keydown",{key:"ArrowRight",ctrlKey:!0}),expect(e.calledTwice,"to be true")})),it("is triggered when a previous month's day on January or a next month's on December is clicked",(function(){i.querySelector(".prev-btn").click(),e.resetHistory(),getCells(i)[19].click(),expect(e.called,"to be false"),getCells(i)[2].click(),expect(e.calledOnce,"to be true"),getCells(i)[40].click(),expect(e.calledTwice,"to be true"),c.setDate({clear:!0})})),it("is triggered when prevBtn or nextBtn is clicked on months view",(function(){const[t,c]=getParts(i,[".prev-btn",".next-btn"]);r.click(),t.click(),expect(e.calledOnce,"to be true"),c.click(),expect(e.calledTwice,"to be true")})),it("is triggered when view month is moved to a previous or next year's by arrow keys",(function(){r.click(),simulant.fire(t,"keydown",{key:"ArrowLeft"}),simulant.fire(t,"keydown",{key:"ArrowLeft"}),expect(e.calledOnce,"to be true"),simulant.fire(t,"keydown",{key:"ArrowRight"}),expect(e.calledTwice,"to be true"),e.resetHistory(),simulant.fire(t,"keydown",{key:"ArrowUp"}),expect(e.calledOnce,"to be true"),simulant.fire(t,"keydown",{key:"ArrowDown"}),expect(e.calledTwice,"to be true")})),it("is triggered when a different year/decade is seleced on years/decades view",(function(){r.click(),r.click(),r.click(),getCells(i)[0].click(),expect(e.calledOnce,"to be true"),getCells(i)[2].click(),expect(e.calledTwice,"to be true"),r.click(),r.click(),e.resetHistory(),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledOnce,"to be true"),simulant.fire(t,"keydown",{key:"ArrowRight"}),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledTwice,"to be true")})),it("is triggered when moving year/decade by arrow keys on years/decades view",(function(){r.click(),r.click(),simulant.fire(t,"keydown",{key:"ArrowRight"}),expect(e.callCount,"to be",1),simulant.fire(t,"keydown",{key:"ArrowLeft"}),expect(e.callCount,"to be",2),simulant.fire(t,"keydown",{key:"ArrowDown"}),expect(e.callCount,"to be",3),simulant.fire(t,"keydown",{key:"ArrowUp"}),expect(e.callCount,"to be",4),r.click(),e.resetHistory(),simulant.fire(t,"keydown",{key:"ArrowRight"}),expect(e.callCount,"to be",1),simulant.fire(t,"keydown",{key:"ArrowLeft"}),expect(e.callCount,"to be",2),simulant.fire(t,"keydown",{key:"ArrowDown"}),expect(e.callCount,"to be",3),simulant.fire(t,"keydown",{key:"ArrowUp"}),expect(e.callCount,"to be",4)})),it("is triggered when the selection is updated to a different year by API calls",(function(){c.setDate("2/22/2020"),expect(e.called,"to be false"),c.setDate("4/22/2022"),expect(e.calledOnce,"to be true"),t.value="3/14/2018",c.update(),expect(e.calledTwice,"to be true")})),it("is triggered when the selection is cleard from a date of a different year from default view date",(function(){c.setDate("2/22/2020"),e.resetHistory(),c.setDate({clear:!0}),expect(e.called,"to be false"),c.setDate("4/22/2022"),e.resetHistory(),t.value="",c.update(),expect(e.calledOnce,"to be true"),c.setDate("4/22/2022"),e.resetHistory(),c.enterEditMode(),t.value="",simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledOnce,"to be true")})),it("is triggered before changeDate when triggered on change of the selection",(function(){const i=sinon.spy();t.addEventListener("changeDate",i),c.setDate("4/22/2022"),expect(i.called,"to be true"),expect(e.called,"to be true"),expect(e.calledBefore(i),"to be true"),t.removeEventListener("changeDate",i),c.setDate({clear:!0})})),it("is triggered when view is reset from different year from default view date on hide",(function(){i.querySelector(".prev-btn").click(),i.querySelector(".prev-btn").click(),e.resetHistory(),c.hide(),expect(e.calledOnce,"to be true")}))})),describe("changeView",(function(){let e;beforeEach((function(){c.show(),e=sinon.spy(),t.addEventListener("changeView",e)})),afterEach((function(){t.removeEventListener("changeView",e),c.hide()})),it("is triggered when view is changed by clicking view switch",(function(){r.click(),expect(e.calledOnce,"to be true"),r.click(),expect(e.calledTwice,"to be true"),r.click(),expect(e.calledThrice,"to be true"),r.click(),expect(e.calledThrice,"to be true")})),it("is triggered when view is changed by pressing ctrl + arrow up",(function(){simulant.fire(t,"keydown",{key:"ArrowUp"}),expect(e.called,"to be false"),simulant.fire(t,"keydown",{key:"ArrowUp",ctrlKey:!0}),expect(e.calledOnce,"to be true"),simulant.fire(t,"keydown",{key:"ArrowUp",ctrlKey:!0}),expect(e.calledTwice,"to be true"),simulant.fire(t,"keydown",{key:"ArrowUp",ctrlKey:!0}),expect(e.calledThrice,"to be true"),simulant.fire(t,"keydown",{key:"ArrowUp",ctrlKey:!0}),expect(e.calledThrice,"to be true")})),it("is triggered when view is changed by seleting a decade/year/month on decades/years/months view",(function(){r.click(),r.click(),r.click(),e.resetHistory(),getCells(i)[2].click(),expect(e.calledOnce,"to be true"),getCells(i)[2].click(),expect(e.calledTwice,"to be true"),getCells(i)[2].click(),expect(e.calledThrice,"to be true"),getCells(i)[12].click(),expect(e.calledThrice,"to be true"),r.click(),r.click(),r.click(),e.resetHistory(),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledOnce,"to be true"),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledTwice,"to be true"),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledThrice,"to be true"),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledThrice,"to be true"),simulant.fire(t,"keydown",{key:"Enter"}),expect(e.calledThrice,"to be true")})),it("is triggered when view is reset on hide",(function(){r.click(),e.resetHistory(),c.hide(),expect(e.calledOnce,"to be true")}))})),describe("show",(function(){let e;beforeEach((function(){c.show(),e=sinon.spy(),t.addEventListener("show",e)})),afterEach((function(){t.removeEventListener("show",e),c.hide()})),it("is triggered when the picker becomes visible",(function(){c.show(),expect(e.called,"to be false"),c.hide(),c.show(),expect(e.calledOnce,"to be true"),c.hide(),t.blur(),t.focus(),expect(e.calledTwice,"to be true"),simulant.fire(t,"keydown",{key:"Escape"}),expect(e.calledTwice,"to be true"),simulant.fire(t,"keydown",{key:"Escape"}),expect(e.calledThrice,"to be true")}))})),describe("hide",(function(){let e;beforeEach((function(){c.show(),e=sinon.spy(),t.addEventListener("hide",e)})),afterEach((function(){t.removeEventListener("hide",e),c.hide()})),it("is triggered when the picker becomes hidden",(function(){c.hide(),expect(e.callCount,"to be",1),c.show(),simulant.fire(testContainer,"mousedown"),expect(e.callCount,"to be",2),c.show(),simulant.fire(t,"keydown",{key:"Tab"}),expect(e.callCount,"to be",3),c.show(),simulant.fire(t,"keydown",{key:"Escape"}),expect(e.callCount,"to be",4)}))})),describe("event object",(function(){const e=e=>{i=e};let i;before((function(){t.addEventListener("changeDate",e),c.setDate("2/14/2020")})),after((function(){t.removeEventListener("changeDate",e)})),it("is a custom event object",(function(){expect(i,"to be a",CustomEvent)})),it("has the result of getDate() in detail.date",(function(){expect(i.detail.date,"to equal",c.getDate())})),it("has a date object of view date in detail.viewDate",(function(){expect(i.detail.viewDate,"to be a date"),expect(i.detail.viewDate.getTime(),"to be",dateValue(2020,1,14))})),it("has view mode of current view in detail.viewId",(function(){expect(i.detail.viewId,"to be",0)})),it("has the Datepicker instance in detail.datepicker",(function(){expect(i.detail.datepicker,"to be",c)}))}))}));
//# sourceMappingURL=/sm/d3cb529f2b46a6c110df93aef744d27e39dd14230201c89e822571828ab176d5.map